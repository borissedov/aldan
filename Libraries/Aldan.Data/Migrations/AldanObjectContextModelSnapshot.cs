// <auto-generated />
using System;
using Aldan.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aldan.Data.Migrations
{
    [DbContext(typeof(AldanObjectContext))]
    partial class AldanObjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aldan.Core.Domain.Common.GenericAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("KeyGroup")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("GenericAttribute");
                });

            modelBuilder.Entity("Aldan.Core.Domain.Logging.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("FullMessage");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<int>("LogLevelId");

                    b.Property<string>("PageUrl");

                    b.Property<string>("ReferrerUrl");

                    b.Property<string>("ShortMessage")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Aldan.Core.Domain.Messages.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BccEmailAddresses")
                        .HasMaxLength(200);

                    b.Property<string>("Body");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("MessageTemplate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = @"<a href=""%Platform.URL%"">%Platform.Name%</a>
<br />
<br />
To change your password <a href=""%User.PasswordRecoveryURL%"">click here</a>.
<br />
<br />
%Platform.Name%
",
                            IsActive = true,
                            Name = "User.PasswordRecovery",
                            Subject = "%Platform.Name%. Password recovery"
                        },
                        new
                        {
                            Id = 2,
                            Body = @"We welcome you to <a href=""%Platform.URL%""> %Platform.Name%</a>.
<br />
<br />
You can now take part in the various services we have to offer you. Some of these services include:
<br />
<br />
Permanent Cart - Any products added to your online cart remain there until you remove them, or check them out.
<br />
Address Book - We can now deliver your products to another address other than yours! This is perfect to send birthday gifts direct to the birthday-person themselves.
<br />
Order History - View your history of purchases that you have made with us.
<br />
Products Reviews - Share your opinions on products with our other users.
<br />
<br />
For help with any of our online services, please email the platform-owner: <a href=""mailto:%Platform.Email%"">%Platform.Email%</a>.
<br />
<br />
Note: This email address was provided on our registration page. If you own the email and did not register on our site, please send an email to <a href=""mailto:%Platform.Email%"">%Platform.Email%</a>.
",
                            IsActive = true,
                            Name = "User.WelcomeMessage",
                            Subject = "Welcome to %Platform.Name%"
                        },
                        new
                        {
                            Id = 3,
                            Body = @"<p>
<a href=""%Platform.URL%"">%Platform.Name%</a>
<br />
<br />
A new user registered with your platform. Below are the user's details:
<br />
Full name: %User.FullName%
<br />
Email: %User.Email%
</p>
",
                            IsActive = true,
                            Name = "NewUser.Notification",
                            Subject = "%Platform.Name%. New user registration"
                        },
                        new
                        {
                            Id = 4,
                            Body = @"<p>
%ContactUs.Body%
</p>
",
                            IsActive = true,
                            Name = "Service.ContactUs",
                            Subject = "%Platform.Name%. Contact us"
                        });
                });

            modelBuilder.Entity("Aldan.Core.Domain.Messages.QueuedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bcc")
                        .HasMaxLength(500);

                    b.Property<string>("Body");

                    b.Property<string>("CC")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("FromName")
                        .HasMaxLength(500);

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(500);

                    b.Property<string>("ReplyToName")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("SentOnUtc");

                    b.Property<int>("SentTries");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ToName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("QueuedEmail");
                });

            modelBuilder.Entity("Aldan.Core.Domain.Tasks.ScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastEndUtc");

                    b.Property<DateTime?>("LastStartUtc");

                    b.Property<DateTime?>("LastSuccessUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Seconds");

                    b.Property<bool>("StopOnError");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ScheduleTask");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            Name = "Send emails",
                            Seconds = 60,
                            StopOnError = false,
                            Type = "Aldan.Services.Messages.QueuedMessagesSendTask, Aldan.Services"
                        });
                });

            modelBuilder.Entity("Aldan.Core.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordSalt");

                    b.Property<int>("Role");

                    b.Property<Guid>("UserGuid");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Aldan.Core.Domain.Logging.Log", b =>
                {
                    b.HasOne("Aldan.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
